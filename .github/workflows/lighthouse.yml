name: Run Lighthouse CI

on:
  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize

permissions:
  contents: read
  pull-requests: write

jobs:
  lhci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 18.12.1
        uses: actions/setup-node@v4
        with:
          node-version: 18.12.1

      - name: Cache node_modules
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install packages
        run: yarn install

      - name: Build
        run: yarn build

      - name: Run Lighthouse CI for Desktop
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          yarn global add @lhci/cli
          lhci collect --config=lighthouserc-desktop.js || echo 'Fail to Run Lighthouse CI ðŸ’¦'
          lhci upload --config=lighthouserc-desktop.js || echo 'Fail to Run Lighthouse CI ðŸ’¦'

      - name: Run Lighthouse CI for Mobile
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        run: |
          lhci collect --config=lighthouserc-mobile.js || echo 'Fail to Run Lighthouse CI ðŸ’¦'
          lhci upload --config=lighthouserc-mobile.js || echo 'Fail to Run Lighthouse CI ðŸ’¦'

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { getLhciPageNameFromUrl, LHCI_GREEN_MIN_SCORE, LHCI_ORANGE_MIN_SCORE, LHCI_RED_MIN_SCORE } = require('./src/configs/lighthouse/Lighthouse.js');

            const getColor = (score) => {
              if (score >= LHCI_GREEN_MIN_SCORE) return 'ðŸŸ¢';
              else if (score >= LHCI_ORANGE_MIN_SCORE) return 'ðŸŸ ';
              return 'ðŸ”´';
            }

            const getAuditColorAndScore = (score) => getColor(score) + score;
            const getPerformanceMetricColorAndScore = (category) => getColor(category.score * 100) + category.displayValue;

            const formatResult = (res) => Math.round(res * 100);

            const desktopResults = JSON.parse(fs.readFileSync('path/to/desktop/results.json'));
            const mobileResults = JSON.parse(fs.readFileSync('path/to/mobile/results.json'));

            const monitoringTime = new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' });
            const scoreDescription = `> ðŸŸ¢: ${LHCI_GREEN_MIN_SCORE} - 100` + ' / ' + `ðŸŸ : ${LHCI_ORANGE_MIN_SCORE} - ${LHCI_GREEN_MIN_SCORE - 1}` + ' / ' + `ðŸ”´: ${LHCI_RED_MIN_SCORE} - ${LHCI_ORANGE_MIN_SCORE - 1}`;
            let comments = '';

            comments += `### Lighthouse report âœ¨\n`;
            comments += `${scoreDescription}\n\n`;

            const scores = { desktop: {}, mobile: {} };

            const extractLhciResults = (results, device) => {
              comments += `#### ${device}\n\n`;

              results.forEach((result) => {
                const { url, summary, jsonPath } = result;
                const { audits } = JSON.parse(fs.readFileSync(jsonPath));

                const pageUrl = url.replace('http://localhost:3000', '');
                const pageName = getLhciPageNameFromUrl(pageUrl);

                Object.keys(summary).forEach((key) => (summary[key] = formatResult(summary[key])));

                const { performance, accessibility, 'best-practices': bestPractices, seo, pwa } = summary;
                const { 'first-contentful-paint': firstContentfulPaint, 'largest-contentful-paint': largestContentfulPaint, 'speed-index': speedIndex, 'total-blocking-time': totalBlockingTime, 'cumulative-layout-shift': cumulativeLayoutShift } = audits;

                const formattedScoreTable = [
                  `| Category | Score |`,
                  `| --- | --- |`,
                  `| ${getColor(performance)} Performance | ${performance} |`,
                  `| ${getColor(accessibility)} Accessibility | ${accessibility} |`,
                  `| ${getColor(bestPractices)} Best practices | ${bestPractices} |`,
                  `| ${getColor(seo)} SEO | ${seo} |`,
                  `| ${getColor(pwa)} PWA | ${pwa} |`,
                  `| ${getColor(firstContentfulPaint.score * 100)} First Contentful Paint | ${firstContentfulPaint.displayValue} |`,
                  `| ${getColor(largestContentfulPaint.score * 100)} Largest Contentful Paint | ${largestContentfulPaint.displayValue} |`,
                  `| ${getColor(speedIndex.score * 100)} Speed Index | ${speedIndex.displayValue} |`,
                  `| ${getColor(totalBlockingTime.score * 100)} Total Blocking Time | ${totalBlockingTime.displayValue} |`,
                  `| ${getColor(cumulativeLayoutShift.score * 100)} Cumulative Layout Shift | ${cumulativeLayoutShift.displayValue} |`,
                  `\n`,
                ].join('\n');

                const score = {
                  Performance: getAuditColorAndScore(performance),
                  Accessibility: getAuditColorAndScore(accessibility),
                  'Best Practices': getAuditColorAndScore(bestPractices),
                  SEO: getAuditColorAndScore(seo),
                  PWA: getAuditColorAndScore(pwa),
                  FCP: getPerformanceMetricColorAndScore(firstContentfulPaint),
                  LCP: getPerformanceMetricColorAndScore(largestContentfulPaint),
                  'Speed Index': getPerformanceMetricColorAndScore(speedIndex),
                  'TBT': getPerformanceMetricColorAndScore(totalBlockingTime),
                  'CLS': getPerformanceMetricColorAndScore(cumulativeLayoutShift),
                }
                
                scores[device][pageName] = score;

                comments += `<details>\n<summary>${pageName}</summary>\n\n> ${pageUrl}\n\n${formattedScoreTable}\n</details>\n\n`;
              });
            } 

            extractLhciResults(desktopResults, 'desktop');
            extractLhciResults(mobileResults, 'mobile');

            core.setOutput('comments', comments);            
            core.setOutput('monitoringTime', monitoringTime);
            core.setOutput('scores', scores);

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |

            const fs = require('fs');
            const { Octokit } = require('@octokit/rest');
            const octokit = new Octokit({ auth: `${{ secrets.GITHUB_TOKEN }}` });

            const { repo, payload } = context;

            const { data: previousComments } = await octokit.issues.listComments({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: payload.pull_request.number,
            });

            const previousLhciComment = previousComments.find((comment) => (comment.body.startsWith(`### Lighthouse report âœ¨\n`)));
            const newComment = `${{ steps.format_lighthouse_score.outputs.comments }}`;

            if (previousLhciComment) {
              await octokit.issues.updateComment({
                owner: repo.owner,
                repo: repo.repo,
                comment_id: previousLhciComment.id, 
                body: newComment, 
              });
            } else { 
              await octokit.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: payload.pull_request.number,
                body: newComment,
              });
            }

        - name: Update Google Sheet
        env:
          GOOGLE_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
          GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
        run: |
          const { GoogleSpreadsheet } = require('google-spreadsheet');
          const { monitoringTime, scores } = JSON.parse(process.env.COMMENTS_OUTPUT);
          
          const doc = new GoogleSpreadsheet('your-spreadsheet-id');
          await doc.useServiceAccountAuth({
            client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
            private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
          });

          await doc.loadInfo();

          const getLhciSheetIdFromPageName = (pageName) => {
            const sheetMap = {
              'Page 1': 'sheet-id-1',
              'Page 2': 'sheet-id-2',
              // Add mappings as needed
            };
            return sheetMap[pageName];
          };

          const updateGoogleSheet = async () => {
            for (const [pageName, score] of Object.entries(scores.desktop)) {
              const sheetId = getLhciSheetIdFromPageName(pageName);

              if (!sheetId) continue;

              const sheet = doc.sheetsById[sheetId];
              await sheet.loadHeaderRow();

              const newRow = {
                Date: monitoringTime,
                'Desktop Performance': score.Performance,
                'Desktop Accessibility': score.Accessibility,
                'Desktop Best Practices': score['Best Practices'],
                'Desktop SEO': score.SEO,
                'Desktop PWA': score.PWA,
                'Desktop FCP': score.FCP,
                'Desktop LCP': score.LCP,
                'Desktop Speed Index': score['Speed Index'],
                'Desktop TBT': score.TBT,
                'Desktop CLS': score.CLS,
                'Mobile Performance': scores.mobile[pageName].Performance,
                'Mobile Accessibility': scores.mobile[pageName].Accessibility,
                'Mobile Best Practices': scores.mobile[pageName]['Best Practices'],
                'Mobile SEO': scores.mobile[pageName].SEO,
                'Mobile PWA': scores.mobile[pageName].PWA,
                'Mobile FCP': scores.mobile[pageName].FCP,
                'Mobile LCP': scores.mobile[pageName].LCP,
                'Mobile Speed Index': scores.mobile[pageName]['Speed Index'],
                'Mobile TBT': scores.mobile[pageName].TBT,
                'Mobile CLS': scores.mobile[pageName].CLS,
              };

              await sheet.addRow(newRow);
            }
          };

          updateGoogleSheet();